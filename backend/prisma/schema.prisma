generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum SwapStatus {
  PENDING
  ACCEPTED
  REJECTED
  CANCELLED
}

model User {
  id           String   @id @default(cuid())
  userId       String   @unique @map("user_id")
  firstName    String   @map("first_name")
  lastName     String   @map("last_name")
  username     String   @unique
  email        String   @unique
  password     String
  phone        String?
  dateOfBirth  String?  @map("date_of_birth")
  country      String?
  state        String?
  address      String?
  facebook     String?
  twitter      String?
  linkedin     String?
  instagram    String?
  isVerified   Boolean  @default(false)
  verificationToken String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  lastLogin    DateTime?

  // relations
  login        Login?
  swaps        Swap[]   // ðŸ‘ˆ opposite relation added

  @@map("register")
}

model Login {
  id       String @id @default(cuid())
  userId   String @unique @map("user_id")
  email    String @unique
  password String
  user     User   @relation(fields: [userId], references: [userId], onDelete: Cascade)

  @@map("login")
}

model Swap {
  id          Int     @id @default(autoincrement())
  listing_id  String  @unique
  title       String
  name        String
  category    String
  country     String
  city        String
  image_name  String
  amount      Float
  currency    String
  description String
  trending    Boolean   @default(false)
  status      SwapStatus @default(PENDING)

  userId String
  user   User   @relation(fields: [userId], references: [userId])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ReviewCount {
  id      String @id @default(cuid())
  swap_id String @unique
  num     Int    @default(0)

  @@map("review_count")
}
